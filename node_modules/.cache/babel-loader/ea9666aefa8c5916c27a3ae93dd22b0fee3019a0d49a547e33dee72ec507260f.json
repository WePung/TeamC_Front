{"ast":null,"code":"var _jsxFileName = \"/Users/test/Desktop/boardtest/TeamC_Front/src/UploadFiles.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useImperativeHandle, forwardRef } from \"react\";\nimport FileUploadService from \"../src/fileUploadService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadFiles = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [message, setMessage] = useState(\"\");\n  const selectFile = event => {\n    setSelectedFiles(event.target.files);\n  };\n\n  //NoticeWriteComponent에서 저장버튼을 클릭 시, 파일 업로드를 실행하기 위해서 \n  //useImperativeHandle이라는 hook을 사용한다. \n  useImperativeHandle(ref, () => ({\n    upload: () => {\n      return new Promise((resolve, reject) => {\n        if (selectedFiles) {\n          let result = FileUploadService.upload(selectedFiles).then(response => {\n            setMessage(response.data.message);\n            resolve(response.data.files);\n            //return UploadService.getFiles();\n          }).catch(err => {\n            fileInput.current.value = '';\n            setSelectedFiles(undefined);\n            if (err.response.data.message) {\n              setMessage(err.response.data.message);\n            } else {\n              setMessage(\"Could not upload the file!\");\n            }\n            reject();\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    }\n  }));\n  const fileInput = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"btn btn-default\",\n      children: [\"//\\uC5EC\\uB7EC\\uAC1C \\uD30C\\uC77C\\uC744 \\uD55C\\uBC88\\uC5D0 \\uC5C5\\uB85C\\uB4DC \\uD558\\uAE30 \\uC704\\uD574 multiple \\uC18D\\uC131\\uC744 \\uCD94\\uAC00\\uD55C\\uB2E4. //\\uD30C\\uC77C \\uC815\\uBCF4\\uB97C \\uBC30\\uC5F4\\uB85C \\uBC1B\\uC744 \\uC218 \\uC788\\uB2E4.\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: selectFile,\n        ref: fileInput,\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), \"//\\uC5C5\\uB85C\\uB4DC \\uC644\\uB8CC \\uC2DC, \\uC131\\uACF5\\uC774\\uB098 \\uC2E4\\uD328 \\uBA54\\uC2DC\\uC9C0\\uB97C \\uBD89\\uC740 \\uC0C9\\uC73C\\uB85C \\uD45C\\uAE30\\uD574\\uC900\\uB2E4.\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-light\",\n      role: \"alert\",\n      style: {\n        color: 'red'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}, \"bUfAI4bxIf2CTRpLTKS1c+wtofo=\")), \"bUfAI4bxIf2CTRpLTKS1c+wtofo=\");\n_c2 = UploadFiles;\nexport default UploadFiles;\nvar _c, _c2;\n$RefreshReg$(_c, \"UploadFiles$forwardRef\");\n$RefreshReg$(_c2, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useRef","useImperativeHandle","forwardRef","FileUploadService","jsxDEV","_jsxDEV","UploadFiles","_s","_c","props","ref","selectedFiles","setSelectedFiles","undefined","message","setMessage","selectFile","event","target","files","upload","Promise","resolve","reject","result","then","response","data","catch","err","fileInput","current","value","className","children","type","onChange","multiple","fileName","_jsxFileName","lineNumber","columnNumber","role","style","color","_c2","$RefreshReg$"],"sources":["/Users/test/Desktop/boardtest/TeamC_Front/src/UploadFiles.js"],"sourcesContent":["import React, {\r\n    useState,\r\n    useRef,\r\n    useImperativeHandle,\r\n    forwardRef\r\n} from \"react\";\r\nimport FileUploadService from \"../src/fileUploadService\";\r\n\r\nconst UploadFiles = forwardRef((props, ref) => {\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const selectFile = (event) => {\r\n        setSelectedFiles(event.target.files);\r\n    };\r\n    \r\n    //NoticeWriteComponent에서 저장버튼을 클릭 시, 파일 업로드를 실행하기 위해서 \r\n    //useImperativeHandle이라는 hook을 사용한다. \r\n    useImperativeHandle(ref, () => ({\r\n        upload: () => {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if (selectedFiles) {\r\n\r\n                    let result = FileUploadService.upload(selectedFiles)\r\n                        .then((response) => {\r\n                            setMessage(response.data.message);\r\n                            resolve(response.data.files);\r\n                            //return UploadService.getFiles();\r\n                        })\r\n                        .catch((err) => {\r\n\r\n                            fileInput.current.value = '';\r\n                            setSelectedFiles(undefined);\r\n                            if (err.response.data.message) {\r\n                                setMessage(err.response.data.message);\r\n                            } else {\r\n                                setMessage(\"Could not upload the file!\");\r\n                            }\r\n                            reject();\r\n                        });\r\n                } else {\r\n\r\n                    resolve([]);\r\n                }\r\n\r\n\r\n            })\r\n        }\r\n    }));\r\n\r\n    const fileInput = useRef();\r\n\r\n    return (    \r\n    <div className=\"form-group\">\r\n\r\n      <label className=\"btn btn-default\">\r\n      //여러개 파일을 한번에 업로드 하기 위해 multiple 속성을 추가한다. \r\n      //파일 정보를 배열로 받을 수 있다. \r\n      <input type=\"file\" onChange={selectFile} ref={fileInput} multiple />\r\n      </label>\r\n\t  \r\n      //업로드 완료 시, 성공이나 실패 메시지를 붉은 색으로 표기해준다. \r\n      <div className=\"alert alert-light\" role=\"alert\" style={{color:'red'}}>\r\n        {message}\r\n      </div>\r\n\r\n    </div>\r\n    )\r\n\r\n});\r\n\r\nexport default UploadFiles;"],"mappings":";;AAAA,OAAOA,KAAK,IACRC,QAAQ,EACRC,MAAM,EACNC,mBAAmB,EACnBC,UAAU,QACP,OAAO;AACd,OAAOC,iBAAiB,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,WAAW,gBAAAC,EAAA,eAAGL,UAAU,CAAAM,EAAA,GAAAD,EAAA,CAAC,CAACE,KAAK,EAAEC,GAAG,KAAK;EAAAH,EAAA;EAE3C,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAACc,SAAS,CAAC;EAC7D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMiB,UAAU,GAAIC,KAAK,IAAK;IAC1BL,gBAAgB,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;;EAED;EACA;EACAlB,mBAAmB,CAACS,GAAG,EAAE,OAAO;IAC5BU,MAAM,EAAEA,CAAA,KAAM;MACV,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QAEpC,IAAIZ,aAAa,EAAE;UAEf,IAAIa,MAAM,GAAGrB,iBAAiB,CAACiB,MAAM,CAACT,aAAa,CAAC,CAC/Cc,IAAI,CAAEC,QAAQ,IAAK;YAChBX,UAAU,CAACW,QAAQ,CAACC,IAAI,CAACb,OAAO,CAAC;YACjCQ,OAAO,CAACI,QAAQ,CAACC,IAAI,CAACR,KAAK,CAAC;YAC5B;UACJ,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAG,IAAK;YAEZC,SAAS,CAACC,OAAO,CAACC,KAAK,GAAG,EAAE;YAC5BpB,gBAAgB,CAACC,SAAS,CAAC;YAC3B,IAAIgB,GAAG,CAACH,QAAQ,CAACC,IAAI,CAACb,OAAO,EAAE;cAC3BC,UAAU,CAACc,GAAG,CAACH,QAAQ,CAACC,IAAI,CAACb,OAAO,CAAC;YACzC,CAAC,MAAM;cACHC,UAAU,CAAC,4BAA4B,CAAC;YAC5C;YACAQ,MAAM,EAAE;UACZ,CAAC,CAAC;QACV,CAAC,MAAM;UAEHD,OAAO,CAAC,EAAE,CAAC;QACf;MAGJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,CAAC;EAEH,MAAMQ,SAAS,GAAG9B,MAAM,EAAE;EAE1B,oBACAK,OAAA;IAAK4B,SAAS,EAAC,YAAY;IAAAC,QAAA,gBAEzB7B,OAAA;MAAO4B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAAC,sPAGnC,eAAA7B,OAAA;QAAO8B,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEpB,UAAW;QAACN,GAAG,EAAEoB,SAAU;QAACO,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5D,4KAGR,eAAApC,OAAA;MAAK4B,SAAS,EAAC,mBAAmB;MAACS,IAAI,EAAC,OAAO;MAACC,KAAK,EAAE;QAACC,KAAK,EAAC;MAAK,CAAE;MAAAV,QAAA,EAClEpB;IAAO;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEF;AAGV,CAAC,kCAAC;AAACI,GAAA,GA/DGvC,WAAW;AAiEjB,eAAeA,WAAW;AAAC,IAAAE,EAAA,EAAAqC,GAAA;AAAAC,YAAA,CAAAtC,EAAA;AAAAsC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}